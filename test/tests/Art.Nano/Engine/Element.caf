import &StandardImport
import ElementFactories

generateRecursiveElementStructure = (depth = 1, parentSize = 100, e2p_x1 = 0, e2p_y1 = 0) ->
  Element
    {}
      e2p_x1
      e2p_y1
      size_x: parentSize
      size_y: parentSize
      draw: if depth % 2 == 1
        ~> @fill #22dd22
      else
        ~> @fill #ffff77
    if depth > 0
      size = Math.floor (parentSize - 3) / 2
      depth--
      [
        generateRecursiveElementStructure depth, size, 1, 1
        generateRecursiveElementStructure depth, size, 2 + size, 1
        generateRecursiveElementStructure depth, size, 1, 2 + size
        generateRecursiveElementStructure depth, size, 2 + size, 2 + size
      ]

suite:
  factories: ->
    test 'Element()' -> Element()
    test 'Element Element()' ->
      parent = Element child = Element()
      assert.eq parent.children, [] child

  draw: ->
    test 'Element draw: ->' ->
      e = Element
        draw: ~> @fill #ffff88

      log e.bitmap

    test 'Element draw with child' ->

      e = Element
        draw: ~> @fill #ff7700
        Element
          size_x: 50
          size_y: 50
          e2p_x1: 10
          e2p_y1: 10
          draw: ~> @fill #77ff77

      log e.bitmap

    test 'Element draw with many children' ->
      log generateRecursiveElementStructure(2, 125).bitmap
