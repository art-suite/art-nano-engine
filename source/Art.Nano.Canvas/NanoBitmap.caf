import &StandardImport, &Tools, {} &compositeModes

##
  Design Notes

  Q/A:
    Q: Why not make calls directly on the HTMLCanvas 2D Context?
    A: Because we need a layer of abstraction for:
      - draw-area detection
      - animation
      We run the same draw-function with the drawAreaDetector for the
      target to get the exact area of the pixels that will be altered.

      For animation, we'll run the function twice with the before and
      after parameters. That will create a draw-queue, which will be
      interpolated according to the animators rules.

class NanoBitmap extends BaseClass

  constructor: (a, b)->

    @size = nanoPoint 0
    @_htmlImageElement = @_canvas = null

    switch
    when isNumber b       then @_initNewCanvas a, b
    when isImage  a       then @_initFromImage a
    when isCanvas a       then @_initFromCanvas a, b
    when a is NanoBitmap  then @_initClone a

  @setter
    size: (obj) ->
      @_size_x = obj.x
      @_size_y = obj.y

  ###########################
    ToPerfTest
  ###########################
  setWithNanoPoint:    (x, y) -> @size = nanoPoint x, y
  setWithoutNanoPoint: (x, y) ->
    @_size_x = x
    @_size_y = y

  ###########################
    Initializers
  ###########################
  _initNewCanvas: (x, y) ->
    {x, y} = nanoPointFloor x, y

    unless nanoPointGt x, y, 0, 0
      throw new Error "invalid size=(#{x}, #{y}) for Art.Nano.Canvas.Bitmap"

    @_initFromCanvas newCanvas x, y

  _initFromCanvas: (canvas, contextAttributes) ->
    @_canvas = canvas
    @size = nanoPoint
      @_canvas.width
      @_canvas.height

    @_initContext contextAttributes

  _initFromImage: (image) ->
    @size = nanoPoint
      image.naturalWidth  ? image.width
      image.naturalHeight ? image.height

    @_htmlImageElement = image

  # override for WebGL
  _initContext: (contextAttributes)->
    @_context = @_canvas?.getContext "2d", contextAttributes

##
  IN:
    element: Art.Nano.Engine.Element
      Included so you can call:
        drawBitmap: ->
          draws the Element's bitmap.

        drawText: ->
          draws the Element's text.

        drawChild: (childKeyString) ->
          draws the specified child

        drawRemainingChildren: () ->
          draws any children not drawn by drawChild()
          If drawRemainingChildren is never called, it will
          be called after the funciton completes.
          If called again, noop.

        I.e. - every child will be drawn exactly once, you can
          just change the order.

  (target, parentSize, sourceBitmap, element) ->
    area = rect parentSize

