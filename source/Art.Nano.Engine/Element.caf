import &StandardImport

class Element

  constuctor: ->
    @_currentLocation_x = 0
    @_currentLocation_y = 0
    @_currentSize_x = 0
    @_currentSize_y = 0

    @_e2p_xx = 1
    @_e2p_yy = 1
    @_e2p_xy = 0
    @_e2p_yx = 0
    @_e2p_x1 = 0
    @_e2p_y1 = 0

    # I'd like the option to inline up to, say. array-size-5s for _drawConstants and _drawCommands.
    @_drawConstants = null    # float32 array
    @_drawCommands = null     # uint8 array
    @_drawStrings = null

    @_drawFunction = null
    @_children = null

  _draw: (target, p2t_xx, p2t_yy, p2t_xy, p2t_yx, p2t_x1, p2t_y1)->
    {xx,yy,xy,yx,x1,y1} = nanoMatrixMul
      @_e2p_xx
      @_e2p_yy
      @_e2p_xy
      @_e2p_yx
      @_e2p_x1
      @_e2p_y1
      p2t_xx
      p2t_yy
      p2t_xy
      p2t_yx
      p2t_x1
      p2t_y1

    if @_drawFunction
      try
        context = checkoutContext target, @
        context.initDraw()
        context.setBaseMatrix xx, yy, xy, yx, x1, y1
        context.setBaseArea
          0
          0
          @_currentSize_x
          @_currentSize_y

        @_drawFunction context

      finally
        checkinContext context




Element

  draw: (target, element) ->
    target.color #ff8
    target.fill()
    element.drawChild target, :foobar

