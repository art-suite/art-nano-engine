import &StandardImport, &ElementFactory

class Element extends &ElementDrawMixin BaseClass

  @postCreateConcreteClass: ->
    elementFactory.register @

  constructor: (props, children) ->
    @init props, children

  @getter
    "children"
    inspectedObjects: ->
      if @children
        []
          :Element
          array child in @children with child.inspectedObjects
      else
        :Element

    bitmap: ->
      @_draw
        new NanoBitmap @_currentSize_x, @_currentSize_y
        1
        1
        0
        0
        0
        0

  emptyObject = {}
  basicInit: ->
    @_currentSize_x     = 100
    @_currentSize_y     = 100

    @_e2p_xx            = 1
    @_e2p_yy            = 1
    @_e2p_xy            = 0
    @_e2p_yx            = 0
    @_e2p_x1            = 0
    @_e2p_y1            = 0

    @_drawFunction      = 0
    @_children          = null
    @

  init: (props, children) ->
    unless props || children
      @basicInit()
    else
      props ?= emptyObject
      @_currentSize_x     = (props.size_x            ? 100) - 0
      @_currentSize_y     = (props.size_y            ? 100) - 0

      @_e2p_xx            = (props.e2p_xx            ? 1) - 0
      @_e2p_yy            = (props.e2p_yy            ? 1) - 0
      @_e2p_xy            = (props.e2p_xy            ? 0) - 0
      @_e2p_yx            = (props.e2p_yx            ? 0) - 0
      @_e2p_x1            = (props.e2p_x1            ? 0) - 0
      @_e2p_y1            = (props.e2p_y1            ? 0) - 0

      @_drawFunction      = props.draw
      @_children          = if children?.length > 0 then children else null
      @

  @setter
    size_x: (v) -> @_currentSize_x = v
    size_y: (v) -> @_currentSize_y = v
    e2p_xx: (v) -> @_e2p_xx = v
    e2p_yy: (v) -> @_e2p_yy = v
    e2p_xy: (v) -> @_e2p_xy = v
    e2p_yx: (v) -> @_e2p_yx = v
    e2p_x1: (v) -> @_e2p_x1 = v
    e2p_y1: (v) -> @_e2p_y1 = v
    draw:   (v) -> @_drawFunction = v




##
  Element

    draw: ->
      @color #ff8
      @fill()
      @drawChild :foobar

