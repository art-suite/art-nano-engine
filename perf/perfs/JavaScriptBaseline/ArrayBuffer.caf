import &StandardImport

floatArrayTestSize = 1024
floatArray = new Float32Array floatArrayTestSize
i = 0
while i < floatArrayTestSize
  floatArray[i] = i
  i++

{buffer} = floatArray
alignedInt8Array = new Int8Array buffer

floatWindow = new Float32Array buffer

runBasicSum = ->
  i = 0
  sum = 0
  while i < floatArrayTestSize
    sum += floatArray[i]
    i++
  sum


stack = new Float32Array 128

interleavedBuffer = new ArrayBuffer floatArrayTestSize * 8 + 4
interleavedInstructions = new Int8Array interleavedBuffer
interleavedFloatData = new Float32Array interleavedBuffer

setupInterleavedVmData = ->
  i = 0
  while i < floatArrayTestSize
    if i == 0
      interleavedInstructions[0] = 1
      interleavedInstructions[1] = 0
      interleavedInstructions[2] = 0
      interleavedInstructions[3] = 0
    else
      interleavedInstructions[i * 8    ] = 2
      interleavedInstructions[i * 8 + 1] = 1
      interleavedInstructions[i * 8 + 2] = 0
      interleavedInstructions[i * 8 + 3] = 0

    interleavedFloatData[i * 2 + 1] = i
    i++

  interleavedInstructions[floatArrayTestSize * 8    ] = 2
  interleavedInstructions[floatArrayTestSize * 8 + 1] = 255
  interleavedInstructions[floatArrayTestSize * 8 + 2] = 255
  interleavedInstructions[floatArrayTestSize * 8 + 3] = 255
setupInterleavedVmData()


interleavedVm = ->
  i = 0
  sp = 0
  instructionsLength = interleavedInstructions.length
  # log {instructionsLength}
  stack[sp++] = 0
  while i < instructionsLength
    # debugI = i
    switch interleavedInstructions[i++]
    when 0 then
      # log "noop #{debugI}"
      1
    when 1 then # push float
      floatOffset = (i + 3) / 4 | 0
      i = (floatOffset + 1) * 4
      v = interleavedFloatData[floatOffset]
      # log "#{debugI}:push #{v} (#{formattedInspect {} floatOffset, sp}}"
      stack[sp++] = v
    when 2 then # sum
      a = stack[--sp]
      # log "#{debugI}:sum #{a} + #{stack[sp-1]} (sp:#{sp})"
      stack[sp-1] += a
    when 255 then i = instructionsLength

  stack[0]

[noOp, pushOp, sumOp, endOp] = array til 4

interleavedVmWithNamedOpCodes = ->
  i = 0
  sp = 0
  instructionsLength = interleavedInstructions.length
  # log {instructionsLength}
  stack[sp++] = 0
  while i < instructionsLength
    # debugI = i
    switch interleavedInstructions[i++]
    when noOp then
      # log "noop #{debugI}"
      1

    when pushOp then # push float
      floatOffset = (i + 3) / 4 | 0
      i = (floatOffset + 1) * 4
      v = interleavedFloatData[floatOffset]
      # log "#{debugI}:push #{v} (#{formattedInspect {} floatOffset, sp}}"
      stack[sp++] = v

    when sumOp then # sum
      a = stack[--sp]
      # log "#{debugI}:sum #{a} + #{stack[sp-1]} (sp:#{sp})"
      stack[sp-1] += a

    when endOp then i = instructionsLength

  stack[0]

parallelInstructions = new Int8Array floatArrayTestSize * 2

setupInterleavedVmData = ->
  i = 0
  while i < floatArrayTestSize
    parallelInstructions[i * 2] = pushOp
    parallelInstructions[i * 2 + 1] = sumOp
    i++

setupInterleavedVmData()
parallelDataVmWithConstNamedOpCodes = &ConstNamedOpCodes.createVm parallelInstructions, floatArray, stack

# &createParallelDataVm.init {parallelInstructions, floatArray, stack}

parallelDataVm = &createParallelDataVm
  # ->
  #   i = 0
  #   sp = 0
  #   fp = 0
  #   instructionsLength = parallelInstructions.length

  #   stack[sp++] = 0
  #   while i < instructionsLength
  #     # if instruction == 0       then 1
  #     # else if instruction == 1  then stack[sp++] = floatArray[fp++]
  #     # else if instruction == 2  then a = stack[--sp]; stack[sp - 1] += a

  #     switch parallelInstructions[i++]
  #     when 0  then 1
  #     when 1  then stack[sp++] = floatArray[fp++]
  #     when 2  then a = stack[--sp]; stack[sp - 1] += a

  #   stack[0]
# &createParallelDataVm.init parallelInstructions, floatArray, stack


parallelDataVmWithNamedOpCodes = ->
  i = 0
  sp = 0
  fp = 0
  instructionsLength = parallelInstructions.length

  stack[sp++] = 0
  while i < instructionsLength
    switch parallelInstructions[i++]
    when noOp   then 1
    when pushOp then stack[sp++] = floatArray[fp++]
    when sumOp  then a = stack[--sp]; stack[sp - 1] += a

  stack[0]

suite:
  validation: ->

    test "validate interleavedVm gets the correct result", ->
      assert.eq
        interleavedVm()
        runBasicSum()

    test "validate interleavedVmWithNamedOpCodes gets the correct result", ->
      assert.eq
        interleavedVmWithNamedOpCodes()
        runBasicSum()

    test "validate parallelDataVm gets the correct result", -> assert.eq runBasicSum(), parallelDataVm parallelInstructions, floatArray, stack
    test "validate parallelDataVmWithConstNamedOpCodes gets the correct result", -> assert.eq runBasicSum(), parallelDataVmWithConstNamedOpCodes()


  mainBenchmarks:
    baseline: ->
      benchmark "sum floatArray" runBasicSum

    interleavedVm: ->
      benchmark "simulated interleavedVm" interleavedVm
      benchmark "simulated interleavedVmWithNamedOpCodes" interleavedVmWithNamedOpCodes

    parallelDataVm: ->
      benchmark "withNumberedOpCodes" -> parallelDataVm parallelInstructions, floatArray, stack
      benchmark "withNamedOpCodes" parallelDataVmWithNamedOpCodes
      benchmark "withConstNamedOpCodes" parallelDataVmWithConstNamedOpCodes


  discardedOption: ->

    ##
      If we could use a sliding window, we wouldn't need to waste
      space in the interleavedInstructions buffer. But that doesn't seem to be efficient.
      And, note, you can't set byteOffset on a TypedArray; so you have
      to create a new one each time...
    benchmark "sum floatWindow" ->
      i = 0
      sum = 0
      # floatWindow.length = 1
      while i < floatArrayTestSize
        floatWindow = new Float32Array buffer, i * 4
        sum += floatWindow[0]
        i++
